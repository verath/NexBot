// Generated by CoffeeScript 1.7.1
(function() {
  var Mock,
    __hasProp = {}.hasOwnProperty,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  Mock = (function() {
    var createMockFunction, methodCalls, self;

    self = [];

    methodCalls = {};

    createMockFunction = function(methodName) {
      return function() {
        self.registerMethodCall(methodName, arguments);
      };
    };

    function Mock(prototypeObject) {
      var attrName, attrValue;
      self = this;
      for (attrName in prototypeObject) {
        if (!__hasProp.call(prototypeObject, attrName)) continue;
        attrValue = prototypeObject[attrName];
        if (typeof attrValue === 'function' && typeof this[attrName] !== 'function') {
          this[attrName] = createMockFunction(attrName);
        }
      }
    }

    Mock.prototype.registerMethodCall = function(methodName, args) {
      var argsArray;
      argsArray = Array.prototype.slice.call(args);
      if (__indexOf.call(methodCalls, methodName) < 0) {
        methodCalls[methodName] = [];
      }
      methodCalls[methodName].push(argsArray);
    };

    Mock.prototype.getMethodCalls = function(methodName) {
      if (typeof methodCalls[methodName] === 'undefined') {
        return [];
      } else {
        return methodCalls[methodName];
      }
    };

    Mock.prototype.reset = function() {
      methodCalls = {};
      return this;
    };

    return Mock;

  })();

  module.exports = Mock;

}).call(this);
